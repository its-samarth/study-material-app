

const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');
const { GridFSBucket } = require('mongodb');
const multer = require('multer');
const path = require('path');
const notifier = require('node-notifier');
const Book = require('./model/book');

const app = express();
const port = 8000;
app.use(cors());

// Connect to MongoDB
const uri = 'mongodb+srv://admin:sam@study.byjskdg.mongodb.net/?retryWrites=true&w=majority';
mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connected to MongoDB'))
  .catch((error) => console.error('Error connecting to MongoDB:', error));

// Create storage engine for Multer
const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, 'src', 'assets'));
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

const upload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
  },
});

// Serve static assets
app.use(express.static(path.join(__dirname, 'src', 'assets')));

// Upload route
app.post('/api/upload', upload.single('file'), async (req, res) => {
  try {
    const { originalname, buffer } = req.file;
    const bucket = new GridFSBucket(mongoose.connection.db);

    const uploadStream = bucket.openUploadStream(originalname);
    const fileId = uploadStream.id;

    uploadStream.write(buffer);
    uploadStream.end();

    const newBook = new Book({
      title: req.body.title,
      author: req.body.author,
      subject: req.body.subject,
      file: fileId,
    });

    await newBook.save();

    res.status(200).json({ fileId });
  } catch (error) {
    console.error('Error uploading file:', error);
    res.status(500).json({ error: 'Failed to upload file' });
  }
});

// Download route
app.get('/api/responses/:fileId', (req, res) => {
  try {
    const fileId = req.params.fileId;
    const bucket = new GridFSBucket(mongoose.connection.db);

    const downloadStream = bucket.openDownloadStream(new mongoose.Types.ObjectId(fileId));

    downloadStream.on('error', (error) => {
      console.error('Error retrieving file:', error);
      res.status(404).json({ error: 'File not found.' });
    });

    downloadStream.pipe(res);
  } catch (error) {
    console.error('Error retrieving file:', error);
    res.status(500).json({ error: 'Failed to retrieve file.' });
  }
});

notifier.notify({
  title: 'MongoDB Connection',
  message: 'Successfully connected to MongoDB',
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});

/*
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb+srv://admin:sam@study.byjskdg.mongodb.net/?retryWrites=true&w=majority', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Create a schema for the book collection
const bookSchema = new mongoose.Schema({
  title: String,
  author: String,
  subject: String,
  file: String,
});

// Create a model based on the schema
const Book = mongoose.model('Book', bookSchema);

// Enable CORS for specific routes
app.post('/api/upload', cors(), async (req, res) => {
  const { title, author, subject, file } = req.body;

  try {
    // Create a new book document
    const book = new Book({
      title,
      author,
      subject,
      file,
    });

    // Save the book to the database
    await book.save();

    // Send a response back to the client
    res.json({ success: true, message: 'Book saved successfully.' });
  } catch (error) {
    console.error('Error saving book:', error);
    res.status(500).json({ success: false, error: 'Failed to save book.' });
  }
});

// Start the server
app.listen(8000, () => {
  console.log('Server is running on port 8000');
});




const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors')

const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb+srv://admin:sam@study.byjskdg.mongodb.net/?retryWrites=true&w=majority', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Create a schema for the book collection
const bookSchema = new mongoose.Schema({
  title: String,
  author: String,
  subject: String,
  file: String,
});

// Create a model based on the schema
const Book = mongoose.model('Book', bookSchema);




// Define the route to handle the POST request
app.post('/api/upload', async (req, res) => {
  const { title, author, subject, file } = req.body;

  try {
    // Create a new book document
    const book = new Book({
      title,
      author,
      subject,
      file,
    });

    // Save the book to the database
    await book.save();

    // Send a response back to the client
    res.json({ success: true, message: 'Book saved successfully.' });
  } catch (error) {
    console.error('Error saving book:', error);
    res.status(500).json({ success: false, error: 'Failed to save book.' });
  }
});

// Start the server
app.listen(8000, () => {
  console.log('Server is running on port 8000');
});











const express = require('express');
const multer = require('multer');
const { GridFSBucket } = require('mongodb');
const notifier = require('node-notifier');
const mongoose = require('mongoose');
const cors = require('cors');
const Book = require('./model/book');

const app = express();
const port = 8000;
app.use(cors());


const bodyParser = require("body-parser");
app.use(bodyParser.json());

const uri = 'mongodb+srv://admin:sam@study.byjskdg.mongodb.net/?retryWrites=true&w=majority';

mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connected to MongoDB'))
  .catch((error) => console.error('Error connecting to MongoDB:', error));

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, 'src', 'assets'));
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

const upload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
  },
});

app.use(express.static(__dirname+'/src/assets'));

app.post('/public', upload.single('file'), async (req, res) => {
  try {
    const { originalname, buffer } = req.file;
    const bucket = new GridFSBucket(mongoose.connection.db);

    const uploadStream = bucket.openUploadStream(originalname);
    const fileId = uploadStream.id;

    uploadStream.write(buffer);
    uploadStream.end();

    const newBook = new Book({
      title: req.body.title,
      author: req.body.author,
      subject: req.body.subject,
      file: fileId,
    });

    await newBook.save();

    res.status(200).json({ fileId });
  } catch (error) {
    console.error('Error uploading file:', error);
    res.status(500).json({ error: 'Failed to upload file' });
  }
});

notifier.notify({
  title: 'MongoDB Connection',
  message: 'Successfully connected to MongoDB',
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
*/




/*
const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors');

const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb+srv://admin:sam@study.byjskdg.mongodb.net/?retryWrites=true&w=majority', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Create a schema for the book collection
const bookSchema = new mongoose.Schema({
  title: String,
  author: String,
  subject: String,
  file: String,
});

// Create a model based on the schema
const Book = mongoose.model('Book', bookSchema);

// Enable CORS for specific routes
app.post('/api/upload', cors(), async (req, res) => {
  const { title, author, subject, file } = req.body;

  try {
    // Create a new book document
    const book = new Book({
      title,
      author,
      subject,
      file,
    });

    // Save the book to the database
    await book.save();

    // Send a response back to the client
    res.json({ success: true, message: 'Book saved successfully.' });
  } catch (error) {
    console.error('Error saving book:', error);
    res.status(500).json({ success: false, error: 'Failed to save book.' });
  }
});

// Start the server
app.listen(8000, () => {
  console.log('Server is running on port 8000');
});




const express = require('express');
const mongoose = require('mongoose');
const cors = require('cors')

const app = express();
app.use(express.json());
app.use(cors());

// Connect to MongoDB
mongoose.connect('mongodb+srv://admin:sam@study.byjskdg.mongodb.net/?retryWrites=true&w=majority', {
  useNewUrlParser: true,
  useUnifiedTopology: true,
});

// Create a schema for the book collection
const bookSchema = new mongoose.Schema({
  title: String,
  author: String,
  subject: String,
  file: String,
});

// Create a model based on the schema
const Book = mongoose.model('Book', bookSchema);




// Define the route to handle the POST request
app.post('/api/upload', async (req, res) => {
  const { title, author, subject, file } = req.body;

  try {
    // Create a new book document
    const book = new Book({
      title,
      author,
      subject,
      file,
    });

    // Save the book to the database
    await book.save();

    // Send a response back to the client
    res.json({ success: true, message: 'Book saved successfully.' });
  } catch (error) {
    console.error('Error saving book:', error);
    res.status(500).json({ success: false, error: 'Failed to save book.' });
  }
});

// Start the server
app.listen(8000, () => {
  console.log('Server is running on port 8000');
});











const express = require('express');
const multer = require('multer');
const { GridFSBucket } = require('mongodb');
const notifier = require('node-notifier');
const mongoose = require('mongoose');
const cors = require('cors');
const Book = require('./model/book');

const app = express();
const port = 8000;
app.use(cors());


const bodyParser = require("body-parser");
app.use(bodyParser.json());

const uri = 'mongodb+srv://admin:sam@study.byjskdg.mongodb.net/?retryWrites=true&w=majority';

mongoose.connect(uri, { useNewUrlParser: true, useUnifiedTopology: true })
  .then(() => console.log('Connected to MongoDB'))
  .catch((error) => console.error('Error connecting to MongoDB:', error));

const storage = multer.diskStorage({
  destination: function (req, file, cb) {
    cb(null, path.join(__dirname, 'src', 'assets'));
  },
  filename: function (req, file, cb) {
    cb(null, file.originalname);
  },
});

const upload = multer({
  storage,
  limits: {
    fileSize: 10 * 1024 * 1024, // 10MB
  },
});

app.use(express.static(__dirname+'/src/assets'));

app.post('/public', upload.single('file'), async (req, res) => {
  try {
    const { originalname, buffer } = req.file;
    const bucket = new GridFSBucket(mongoose.connection.db);

    const uploadStream = bucket.openUploadStream(originalname);
    const fileId = uploadStream.id;

    uploadStream.write(buffer);
    uploadStream.end();

    const newBook = new Book({
      title: req.body.title,
      author: req.body.author,
      subject: req.body.subject,
      file: fileId,
    });

    await newBook.save();

    res.status(200).json({ fileId });
  } catch (error) {
    console.error('Error uploading file:', error);
    res.status(500).json({ error: 'Failed to upload file' });
  }
});

notifier.notify({
  title: 'MongoDB Connection',
  message: 'Successfully connected to MongoDB',
});

app.listen(port, () => {
  console.log(`Server is running on port ${port}`);
});
*/